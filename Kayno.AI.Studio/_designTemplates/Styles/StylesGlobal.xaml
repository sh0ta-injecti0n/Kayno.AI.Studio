<ResourceDictionary
	x:Class="StylesGlobal.StylesGlobal"
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:System="clr-namespace:System;assembly=mscorlib"
	xmlns:virtual="clr-namespace:WpfToolkit.Controls;assembly=VirtualizingWrapPanel"
	xmlns:local="clr-namespace:StylesGlobal"
	xmlns:theme="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero2"
	>

	<FontFamily x:Key="GlobalFontFamily">/Kayno.AI.Studio;component/_res/fonts/NotoSansJP-Light.otf#Noto Sans JP</FontFamily>
	<FontFamily x:Key="GlobalFontFamily1">/Kayno.AI.Studio;component/_res/fonts/NotoSansJP-Bold.otf#Noto Sans JP</FontFamily>
	<FontFamily x:Key="GlobalFontFamily2">/Kayno.AI.Studio;component/_res/fonts/SpicaNeue-Regular.ttf#Spica Neue Regular</FontFamily>

	<!--
    <FontFamily x:Key="FontIcon1">/Kayno.AI.Studio;component/_res/fonts/MaterialIconsRound-Regular.otf#Material Icons Round Regular</FontFamily>
    <FontFamily x:Key="FontIcon2">/Kayno.AI.Studio;component/_res/fonts/MaterialSymbolsRounded[FILL,GRAD,opsz,wght].ttf#Material Symbols Rounded</FontFamily>
	-->
	<FontFamily x:Key="FontIcon3">/Kayno.AI.Studio;component/_res/fonts/Font Awesome 6 Free-Regular-400.otf#Font Awesome 6 Free Regular</FontFamily>
	<FontFamily x:Key="FontIcon4">/Kayno.AI.Studio;component/_res/fonts/Font Awesome 6 Free-Solid-900.otf#Font Awesome 6 Free Solid</FontFamily>

	<!--
		WPFのバグ？でハイフン付きのリガチャ(Liguature, 合字)はサポートされない。
		そのためアイコンフォントでは"home"はアイコンになっても"chevron-left"はアイコンにならない。
		.NET 9 で修正予定らしい。
		
		そのため使用時はグリフをコピーすること。
	-->

	<System:Double x:Key="FontSizeH1">32</System:Double>
	<System:Double x:Key="FontSizeH2">24</System:Double>
	<System:Double x:Key="FontSizeContent">14</System:Double>
	<System:Double x:Key="FontSizeContentSub">12</System:Double>
	<System:Double x:Key="FontSizePrimaryMain">24</System:Double>


	<Thickness x:Key="m1">16, 8, 16, 0</Thickness>

	<!--#region ## C# 🔄 Converters-->

	<BooleanToVisibilityConverter x:Key="boolToVisible" />

	<local:ToHalfConverter x:Key="ToHalf" />

	<!--#endregion ## C# 🔄 Converters-->


	<!--  ↓　順番大事なので下手に並べ替えないこと　↓  -->
	<!--
		※下手にファイルに小分けにすると都度読まれて起動時のレイテンシにつながるので注意。
		あと単純にメンテナンス時にわかりづらい。(XAML内記述がファイル名変更に追従しないなど)
	-->

	<!--#region ## 🌏 Global-->


	<Style x:Key="GlobalFocusVisual">
		<Setter Property="Control.Template">
			<Setter.Value>
				<ControlTemplate>
					<Rectangle
						Margin="0"
						Stroke="{StaticResource GradientControlBorder}"
						SnapsToDevicePixels="true"
						StrokeThickness="4"
						RadiusX="{TemplateBinding ActualHeight,
						                          Converter={StaticResource ToHalf}}"
						RadiusY="{TemplateBinding ActualHeight,
						                          Converter={StaticResource ToHalf}}"
						/>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style
		x:Key="ToolTip1"
		TargetType="ToolTip"
		>
		<Setter Property="Background" Value="{StaticResource SolidBase2}" />
		<Setter Property="FontFamily" Value="{StaticResource GlobalFontFamily}" />
		<Setter Property="FontSize" Value="{StaticResource FontSizeContent}" />
		<Setter Property="Foreground" Value="{StaticResource SolidBase8}" />
		<Setter Property="HasDropShadow" Value="True" />
		<Setter Property="OverridesDefaultStyle" Value="true" />
		<Setter Property="Padding" Value="16" />
		<Setter Property="StaysOpen" Value="True" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ToolTip">
					<Border
						Name="Border"
						Width="{TemplateBinding Width}"
						Height="{TemplateBinding Height}"
						BorderThickness="0"
						CornerRadius="16"
						Background="{TemplateBinding Background}"
						>
						<ContentPresenter
							Margin="{TemplateBinding Padding}"
							HorizontalAlignment="Left"
							VerticalAlignment="Top"
							TextElement.Foreground="{TemplateBinding Foreground}"
							/>
					</Border>
					<!--
					<ControlTemplate.Triggers>
						<Trigger Property="HasDropShadow" Value="true">
							<Setter TargetName="Border" Property="CornerRadius" Value="16" />
							<Setter TargetName="Border" Property="SnapsToDevicePixels" Value="true" />
						</Trigger>
					</ControlTemplate.Triggers>
					-->
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="ToolTipService.InitialShowDelay" Value="1" />
		<Setter Property="ToolTipService.ShowDuration" Value="8" />
	</Style>

	<Style
		TargetType="ToolTip"
		BasedOn="{StaticResource ToolTip1}"
		/>

	<Style
		x:Key="toolTipImageHover"
		TargetType="ToolTip"
		BasedOn="{StaticResource ToolTip1}"
		>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate>
					<ContentControl />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style TargetType="Window">
		<Setter Property="FontFamily" Value="{StaticResource GlobalFontFamily}" />
	</Style>

	<Style TargetType="ContentControl">
		<Setter Property="FocusVisualStyle" Value="{StaticResource GlobalFocusVisual}" />
		<Setter Property="FontFamily" Value="{StaticResource GlobalFontFamily}" />
		<Setter Property="ToolTipService.ShowDuration" Value="200" />
	</Style>

	<Style TargetType="Button">
		<Setter Property="Cursor" Value="Hand" />
	</Style>

	<Style TargetType="{x:Type TextElement}">
		<Setter Property="FontFamily" Value="{StaticResource GlobalFontFamily}" />
	</Style>

	<!--
	<Style TargetType="TextBlock">
		<Setter Property="FontFamily" Value="{StaticResource GlobalFontFamily}" />
		<Setter Property="FontSize" Value="{StaticResource FontSizeContent}" />
	</Style>

	-->

	<!--  ※ScrollBarやSliderに使われる機能ボタン  -->
	<Style
		x:Key="RepeatButtonTransparent"
		TargetType="{x:Type RepeatButton}"
		>
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="Focusable" Value="false" />
		<Setter Property="IsTabStop" Value="false" />
		<Setter Property="OverridesDefaultStyle" Value="true" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type RepeatButton}">
					<Rectangle
						Width="{TemplateBinding Width}"
						Height="{TemplateBinding Height}"
						Fill="{TemplateBinding Background}"
						/>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!--#region ## ScrollBar-->
	<SolidColorBrush
		x:Key="ScrollBar.Static.Background"
		Color="Transparent"
		/>
	<SolidColorBrush
		x:Key="ScrollBar.Static.Border"
		Color="Transparent"
		/>
	<SolidColorBrush
		x:Key="ScrollBar.Static.Glyph"
		Color="{StaticResource Base3}"
		/>
	<SolidColorBrush
		x:Key="ScrollBar.Static.Thumb"
		Color="{StaticResource Base3}"
		/>
	<SolidColorBrush
		x:Key="ScrollBar.MouseOver.Background"
		Color="Transparent"
		/>
	<SolidColorBrush
		x:Key="ScrollBar.MouseOver.Border"
		Color="Transparent"
		/>
	<SolidColorBrush
		x:Key="ScrollBar.MouseOver.Glyph"
		Color="{StaticResource Base2}"
		/>
	<SolidColorBrush
		x:Key="ScrollBar.MouseOver.Thumb"
		Color="{StaticResource Base2}"
		/>
	<SolidColorBrush
		x:Key="ScrollBar.Pressed.Background"
		Color="Transparent"
		/>
	<SolidColorBrush
		x:Key="ScrollBar.Pressed.Border"
		Color="Transparent"
		/>
	<SolidColorBrush
		x:Key="ScrollBar.Pressed.Thumb"
		Color="{StaticResource Base4}"
		/>
	<SolidColorBrush
		x:Key="ScrollBar.Pressed.Glyph"
		Color="{StaticResource Base4}"
		/>
	<SolidColorBrush
		x:Key="ScrollBar.Disabled.Background"
		Color="Transparent"
		/>
	<SolidColorBrush
		x:Key="ScrollBar.Disabled.Border"
		Color="Transparent"
		/>
	<SolidColorBrush
		x:Key="ScrollBar.Disabled.Glyph"
		Color="{StaticResource Base5}"
		/>
	<Style
		x:Key="ScrollBarButton"
		TargetType="{x:Type RepeatButton}"
		>
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="Focusable" Value="false" />
		<Setter Property="HorizontalContentAlignment" Value="Center" />
		<Setter Property="IsTabStop" Value="false" />
		<Setter Property="Padding" Value="1" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type RepeatButton}">
					<Border
						x:Name="border"
						Background="Transparent"
						SnapsToDevicePixels="true"
						>
						<ContentPresenter
							x:Name="contentPresenter"
							Margin="{TemplateBinding Padding}"
							HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
							VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
							Focusable="False"
							SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
							/>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter TargetName="border" Property="Background" Value="{StaticResource ScrollBar.MouseOver.Background}" />
							<Setter TargetName="border" Property="BorderBrush" Value="{StaticResource ScrollBar.MouseOver.Border}" />
						</Trigger>
						<Trigger Property="IsPressed" Value="true">
							<Setter TargetName="border" Property="Background" Value="{StaticResource ScrollBar.Pressed.Background}" />
							<Setter TargetName="border" Property="BorderBrush" Value="{StaticResource ScrollBar.Pressed.Border}" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter TargetName="border" Property="BorderBrush" Value="{StaticResource ScrollBar.Disabled.Border}" />
							<Setter TargetName="contentPresenter" Property="Opacity" Value="0.56" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="VerticalContentAlignment" Value="Center" />
	</Style>
	<Style
		x:Key="ScrollBarThumbVertical"
		TargetType="{x:Type Thumb}"
		>
		<Setter Property="IsTabStop" Value="false" />
		<Setter Property="OverridesDefaultStyle" Value="true" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Thumb}">
					<Rectangle
						x:Name="rectangle"
						Width="{TemplateBinding Width}"
						Height="{TemplateBinding Height}"
						RadiusX="2"
						RadiusY="2"
						Fill="{StaticResource ScrollBar.Static.Thumb}"
						SnapsToDevicePixels="True"
						/>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter TargetName="rectangle" Property="Fill" Value="{StaticResource ScrollBar.MouseOver.Thumb}" />
						</Trigger>
						<Trigger Property="IsDragging" Value="true">
							<Setter TargetName="rectangle" Property="Fill" Value="{StaticResource ScrollBar.Pressed.Thumb}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style
		x:Key="ScrollBarThumbHorizontal"
		TargetType="{x:Type Thumb}"
		>
		<Setter Property="IsTabStop" Value="false" />
		<Setter Property="OverridesDefaultStyle" Value="true" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Thumb}">
					<Rectangle
						x:Name="rectangle"
						Width="{TemplateBinding Width}"
						Height="{TemplateBinding Height}"
						RadiusX="2"
						RadiusY="2"
						Fill="{StaticResource ScrollBar.Static.Thumb}"
						SnapsToDevicePixels="True"
						/>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter TargetName="rectangle" Property="Fill" Value="{StaticResource ScrollBar.MouseOver.Thumb}" />
						</Trigger>
						<Trigger Property="IsDragging" Value="true">
							<Setter TargetName="rectangle" Property="Fill" Value="{StaticResource ScrollBar.Pressed.Thumb}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<!--  Scrollbar: horizontal  -->
	<Style TargetType="{x:Type ScrollBar}">
		<Setter Property="Background" Value="{StaticResource ScrollBar.Static.Background}" />
		<Setter Property="BorderBrush" Value="{StaticResource ScrollBar.Static.Border}" />
		<Setter Property="BorderThickness" Value="1,0" />
		<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
		<Setter Property="MinWidth" Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" />
		<Setter Property="Stylus.IsFlicksEnabled" Value="false" />
		<Setter Property="Stylus.IsPressAndHoldEnabled" Value="false" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ScrollBar}">
					<Grid
						x:Name="Bg"
						SnapsToDevicePixels="true"
						>
						<Grid.RowDefinitions>
							<RowDefinition MaxHeight="{DynamicResource {x:Static SystemParameters.VerticalScrollBarButtonHeightKey}}" />
							<RowDefinition Height="0.00001*" />
							<RowDefinition MaxHeight="{DynamicResource {x:Static SystemParameters.VerticalScrollBarButtonHeightKey}}" />
						</Grid.RowDefinitions>
						<Border
							Grid.Row="1"
							Background="Transparent"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							/>
						<RepeatButton
							x:Name="PART_LineUpButton"
							Command="{x:Static ScrollBar.LineUpCommand}"
							IsEnabled="{TemplateBinding IsMouseOver}"
							Style="{StaticResource ScrollBarButton}"
							>
							<Path
								x:Name="ArrowTop"
								Margin="3,4,3,3"
								Data="M 0,4 C0,4 0,6 0,6 0,6 3.5,2.5 3.5,2.5 3.5,2.5 7,6 7,6 7,6 7,4 7,4 7,4 3.5,0.5 3.5,0.5 3.5,0.5 0,4 0,4 z"
								Fill="{StaticResource ScrollBar.Static.Glyph}"
								Stretch="Uniform"
								/>
						</RepeatButton>
						<Track
							x:Name="PART_Track"
							Grid.Row="1"
							IsDirectionReversed="true"
							IsEnabled="{TemplateBinding IsMouseOver}"
							>
							<Track.DecreaseRepeatButton>
								<RepeatButton
									Command="{x:Static ScrollBar.PageUpCommand}"
									Style="{StaticResource RepeatButtonTransparent}"
									/>
							</Track.DecreaseRepeatButton>
							<Track.IncreaseRepeatButton>
								<RepeatButton
									Command="{x:Static ScrollBar.PageDownCommand}"
									Style="{StaticResource RepeatButtonTransparent}"
									/>
							</Track.IncreaseRepeatButton>
							<Track.Thumb>
								<Thumb Style="{StaticResource ScrollBarThumbVertical}" />
							</Track.Thumb>
						</Track>
						<RepeatButton
							x:Name="PART_LineDownButton"
							Grid.Row="2"
							Command="{x:Static ScrollBar.LineDownCommand}"
							IsEnabled="{TemplateBinding IsMouseOver}"
							Style="{StaticResource ScrollBarButton}"
							>
							<Path
								x:Name="ArrowBottom"
								Margin="3,4,3,3"
								Data="M 0,2.5 C0,2.5 0,0.5 0,0.5 0,0.5 3.5,4 3.5,4 3.5,4 7,0.5 7,0.5 7,0.5 7,2.5 7,2.5 7,2.5 3.5,6 3.5,6 3.5,6 0,2.5 0,2.5 z"
								Fill="{StaticResource ScrollBar.Static.Glyph}"
								Stretch="Uniform"
								/>
						</RepeatButton>
					</Grid>
					<ControlTemplate.Triggers>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsMouseOver, ElementName=PART_LineDownButton}" Value="true" />
								<Condition Binding="{Binding IsPressed, ElementName=PART_LineDownButton}" Value="true" />
							</MultiDataTrigger.Conditions>
							<Setter TargetName="ArrowBottom" Property="Fill" Value="{StaticResource ScrollBar.Pressed.Glyph}" />
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsMouseOver, ElementName=PART_LineUpButton}" Value="true" />
								<Condition Binding="{Binding IsPressed, ElementName=PART_LineUpButton}" Value="true" />
							</MultiDataTrigger.Conditions>
							<Setter TargetName="ArrowTop" Property="Fill" Value="{StaticResource ScrollBar.Pressed.Glyph}" />
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsMouseOver, ElementName=PART_LineDownButton}" Value="true" />
								<Condition Binding="{Binding IsPressed, ElementName=PART_LineDownButton}" Value="false" />
							</MultiDataTrigger.Conditions>
							<Setter TargetName="ArrowBottom" Property="Fill" Value="{StaticResource ScrollBar.MouseOver.Glyph}" />
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsMouseOver, ElementName=PART_LineUpButton}" Value="true" />
								<Condition Binding="{Binding IsPressed, ElementName=PART_LineUpButton}" Value="false" />
							</MultiDataTrigger.Conditions>
							<Setter TargetName="ArrowTop" Property="Fill" Value="{StaticResource ScrollBar.MouseOver.Glyph}" />
						</MultiDataTrigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter TargetName="ArrowBottom" Property="Fill" Value="{StaticResource ScrollBar.Disabled.Glyph}" />
							<Setter TargetName="ArrowTop" Property="Fill" Value="{StaticResource ScrollBar.Disabled.Glyph}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="Width" Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" />
		<Style.Triggers>
			<Trigger Property="Orientation" Value="Horizontal">
				<Setter Property="BorderThickness" Value="0,1" />
				<Setter Property="Height" Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}" />
				<Setter Property="MinHeight" Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}" />
				<Setter Property="MinWidth" Value="0" />
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type ScrollBar}">
							<Grid
								x:Name="Bg"
								SnapsToDevicePixels="true"
								>
								<Grid.ColumnDefinitions>
									<ColumnDefinition MaxWidth="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}" />
									<ColumnDefinition Width="0.00001*" />
									<ColumnDefinition MaxWidth="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}" />
								</Grid.ColumnDefinitions>
								<Border
									Grid.Column="1"
									Background="{TemplateBinding Background}"
									BorderBrush="{TemplateBinding BorderBrush}"
									BorderThickness="{TemplateBinding BorderThickness}"
									/>
								<RepeatButton
									x:Name="PART_LineLeftButton"
									Command="{x:Static ScrollBar.LineLeftCommand}"
									IsEnabled="{TemplateBinding IsMouseOver}"
									Style="{StaticResource ScrollBarButton}"
									>
									<Path
										x:Name="ArrowLeft"
										Margin="3"
										Data="M 3.18,7 C3.18,7 5,7 5,7 5,7 1.81,3.5 1.81,3.5 1.81,3.5 5,0 5,0 5,0 3.18,0 3.18,0 3.18,0 0,3.5 0,3.5 0,3.5 3.18,7 3.18,7 z"
										Fill="{StaticResource ScrollBar.Static.Glyph}"
										Stretch="Uniform"
										/>
								</RepeatButton>
								<Track
									x:Name="PART_Track"
									Grid.Column="1"
									IsEnabled="{TemplateBinding IsMouseOver}"
									>
									<Track.DecreaseRepeatButton>
										<RepeatButton
											Command="{x:Static ScrollBar.PageLeftCommand}"
											Style="{StaticResource RepeatButtonTransparent}"
											/>
									</Track.DecreaseRepeatButton>
									<Track.IncreaseRepeatButton>
										<RepeatButton
											Command="{x:Static ScrollBar.PageRightCommand}"
											Style="{StaticResource RepeatButtonTransparent}"
											/>
									</Track.IncreaseRepeatButton>
									<Track.Thumb>
										<Thumb Style="{StaticResource ScrollBarThumbHorizontal}" />
									</Track.Thumb>
								</Track>
								<RepeatButton
									x:Name="PART_LineRightButton"
									Grid.Column="2"
									Command="{x:Static ScrollBar.LineRightCommand}"
									IsEnabled="{TemplateBinding IsMouseOver}"
									Style="{StaticResource ScrollBarButton}"
									>
									<Path
										x:Name="ArrowRight"
										Margin="3"
										Data="M 1.81,7 C1.81,7 0,7 0,7 0,7 3.18,3.5 3.18,3.5 3.18,3.5 0,0 0,0 0,0 1.81,0 1.81,0 1.81,0 5,3.5 5,3.5 5,3.5 1.81,7 1.81,7 z"
										Fill="{StaticResource ScrollBar.Static.Glyph}"
										Stretch="Uniform"
										/>
								</RepeatButton>
							</Grid>
							<ControlTemplate.Triggers>
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition Binding="{Binding IsMouseOver, ElementName=PART_LineRightButton}" Value="true" />
										<Condition Binding="{Binding IsPressed, ElementName=PART_LineRightButton}" Value="true" />
									</MultiDataTrigger.Conditions>
									<Setter TargetName="ArrowRight" Property="Fill" Value="{StaticResource ScrollBar.Pressed.Glyph}" />
								</MultiDataTrigger>
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition Binding="{Binding IsMouseOver, ElementName=PART_LineLeftButton}" Value="true" />
										<Condition Binding="{Binding IsPressed, ElementName=PART_LineLeftButton}" Value="true" />
									</MultiDataTrigger.Conditions>
									<Setter TargetName="ArrowLeft" Property="Fill" Value="{StaticResource ScrollBar.Pressed.Glyph}" />
								</MultiDataTrigger>
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition Binding="{Binding IsMouseOver, ElementName=PART_LineRightButton}" Value="true" />
										<Condition Binding="{Binding IsPressed, ElementName=PART_LineRightButton}" Value="false" />
									</MultiDataTrigger.Conditions>
									<Setter TargetName="ArrowRight" Property="Fill" Value="{StaticResource ScrollBar.MouseOver.Glyph}" />
								</MultiDataTrigger>
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition Binding="{Binding IsMouseOver, ElementName=PART_LineLeftButton}" Value="true" />
										<Condition Binding="{Binding IsPressed, ElementName=PART_LineLeftButton}" Value="false" />
									</MultiDataTrigger.Conditions>
									<Setter TargetName="ArrowLeft" Property="Fill" Value="{StaticResource ScrollBar.MouseOver.Glyph}" />
								</MultiDataTrigger>
								<Trigger Property="IsEnabled" Value="false">
									<Setter TargetName="ArrowLeft" Property="Fill" Value="{StaticResource ScrollBar.Disabled.Glyph}" />
									<Setter TargetName="ArrowRight" Property="Fill" Value="{StaticResource ScrollBar.Disabled.Glyph}" />
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
				<Setter Property="Width" Value="Auto" />
			</Trigger>
		</Style.Triggers>
	</Style>
	<!--#endregion ## ScrollBar-->


	<!--#endregion ## Global-->


	<!--#region ## 🔲 Panels-->

	<ItemsPanelTemplate x:Key="WrapPanelVirtualized">
		<virtual:VirtualizingWrapPanel
			x:Name="wrapPanel"
			MaxWidth="{TemplateBinding MaxWidth}"
			Background="Transparent"
			/>
	</ItemsPanelTemplate>

	<Style
		x:Key="ComboBoxContainerStyle"
		TargetType="{x:Type ComboBoxItem}"
		>
		<Setter Property="Margin" Value="0" />
		<Setter Property="Padding" Value="0" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ComboBoxItem}">
					<Grid>
						<TextBlock Text="{Binding model_name}" />
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style
		x:Key="Grid1_LabelContent46"
		TargetType="ItemsControl"
		>
		<Setter Property="Height" Value="32" />
		<Setter Property="ItemsPanel">
			<Setter.Value>
				<ItemsPanelTemplate>
					<Grid>
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="4*" />
							<ColumnDefinition Width="6*" />
						</Grid.ColumnDefinitions>
						<Grid.Resources>
							<!--
							<Style
								TargetType="TextBlock"
								BasedOn="{DynamicResource TextBlock1}"
								>
								<Setter Property="HorizontalAlignment" Value="Right" />
							</Style>
							-->
						</Grid.Resources>
					</Grid>
				</ItemsPanelTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="Margin" Value="{StaticResource m1}" />
	</Style>

	<!--#region ##Group-->
	<Style
		x:Key="GroupContainerStyle"
		TargetType="GroupItem"
		>
		<Setter Property="Margin" Value="0" />
		<Setter Property="Padding" Value="0" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type GroupItem}">
					<Expander
						Background="Transparent"
						IsExpanded="True"
						>
						<Expander.Header>
							<DockPanel>
								<TextBlock
									Margin="2"
									FontWeight="Bold"
									Text="{Binding Name}"
									/>
								<!--
									Binding で指定するのは、CollectionViewSourceの「Name」。
									Modelで表示したいプロパティ名(今回ならGroup)　で　は　な　い　ので注意。
								-->
								<TextBlock Text=" | " />
								<TextBlock Text="{Binding ItemCount}" />
							</DockPanel>
						</Expander.Header>
						<Expander.Content>
							<ItemsPresenter />
						</Expander.Content>
					</Expander>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!--#endregion-->

	<!--#endregion ## Panels-->


	<!--#region ## 🔘 Buttons-->

	<!--  ボタン共通  -->
	<ControlTemplate
		x:Key="ButtonTemplate1"
		TargetType="{x:Type ButtonBase}"
		>
		<Border
			x:Name="border"
			SnapsToDevicePixels="true"
			Background="{TemplateBinding Background}"
			CornerRadius="{TemplateBinding ActualHeight,
			                               Converter={StaticResource ToHalf}}"
			>
			<Border
				x:Name="border2"
				BorderBrush="{TemplateBinding BorderBrush}"
				BorderThickness="{TemplateBinding BorderThickness}"
				CornerRadius="{TemplateBinding ActualHeight,
				                               Converter={StaticResource ToHalf}}"
				>

				<ContentPresenter
					x:Name="contentPresenter"
					Margin="{TemplateBinding Padding}"
					HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
					VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
					SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
					Focusable="False"
					RecognizesAccessKey="True"
					Opacity="1.0"
					/>
			</Border>
		</Border>
		<ControlTemplate.Triggers>
			<Trigger Property="Button.IsDefaulted" Value="true">
				<Setter TargetName="border2" Property="BorderBrush" Value="{StaticResource SolidPrimary}" />
				<Setter TargetName="border2" Property="BorderThickness" Value="2" />
			</Trigger>
			<Trigger Property="IsMouseOver" Value="true">
				<Setter Property="Cursor" Value="Hand" />
				<Setter TargetName="contentPresenter" Property="Opacity" Value="0.8" />
			</Trigger>
			<Trigger Property="IsPressed" Value="true">
				<Setter TargetName="border" Property="Background" Value="{StaticResource SolidPrimary}" />
				<Setter TargetName="border2" Property="BorderBrush" Value="Transparent" />
			</Trigger>
			<Trigger Property="IsEnabled" Value="false">
				<Setter TargetName="border" Property="Background" Value="{StaticResource SolidBase7}" />
				<Setter TargetName="border2" Property="BorderBrush" Value="Transparent" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<!--#region ## ButtonIcon-->
	<Style
		x:Key="ButtonIcon"
		TargetType="{x:Type ButtonBase}"
		>
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="BorderBrush" Value="Transparent" />
		<Setter Property="BorderThickness" Value="0" />
		<!--
			BasedOn="{StaticResource ButtonIconBase}"
		-->
		<Setter Property="FocusVisualStyle" Value="{StaticResource GlobalFocusVisual}" />
		<Setter Property="FontFamily" Value="{StaticResource FontIcon4}" />
		<Setter Property="FontSize" Value="{StaticResource FontSizeContent}" />
		<Setter Property="Foreground" Value="{StaticResource SolidBase3}" />
		<Setter Property="Height" Value="48" />
		<Setter Property="HorizontalAlignment" Value="Center" />
		<Setter Property="HorizontalContentAlignment" Value="Center" />
		<Setter Property="Padding" Value="8" />
		<Setter Property="Template" Value="{StaticResource ButtonTemplate1}" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="Width" Value="48" />
	</Style>
	<!--#endregion ## ButtonIcon-->

	<!--#region ## Button.Primary.Main-->
	<SolidColorBrush
		x:Key="ButtonPrimaryMain.Hover"
		Color="{StaticResource Base1}"
		/>
	<Style
		x:Key="ButtonPrimaryMain"
		TargetType="{x:Type ButtonBase}"
		BasedOn="{StaticResource ButtonIcon}"
		>
		<Setter Property="Background" Value="{StaticResource GradientPrimaryMain}" />
		<Setter Property="BorderBrush" Value="{StaticResource GradientPrimaryMainBorder}" />
		<Setter Property="BorderThickness" Value="2" />
		<Setter Property="Effect">
			<Setter.Value>
				<DropShadowEffect
					Direction="-90"
					ShadowDepth="8"
					Opacity="0.8"
					BlurRadius="24"
					Color="Black"
					/>
			</Setter.Value>
		</Setter>
		<Setter Property="FontSize" Value="{StaticResource FontSizePrimaryMain}" />
		<Setter Property="Foreground" Value="{StaticResource SolidBase1}" />
		<Setter Property="Height" Value="64" />
		<Setter Property="Padding" Value="4,-2,0,0" />
		<Setter Property="Width" Value="64" />
	</Style>
	<!--#endregion ## Button.Primary.Main-->

	<!--  Button Normal  -->
	<Style
		x:Key="ButtonNormal"
		TargetType="{x:Type ButtonBase}"
		>
		<Setter Property="Background" Value="{StaticResource GradientControl}" />
		<Setter Property="BorderBrush" Value="{StaticResource GradientControlBorder}" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="FocusVisualStyle" Value="{StaticResource GlobalFocusVisual}" />
		<Setter Property="FontSize" Value="{StaticResource FontSizeContent}" />
		<Setter Property="Foreground" Value="{StaticResource SolidBase2}" />
		<Setter Property="MinHeight" Value="32" />
		<Setter Property="Padding" Value="12,0" />
		<Setter Property="Template" Value="{DynamicResource ButtonTemplate1}" />
	</Style>

	<!--  ToggleButton Normal  -->
	<Style
		x:Key="ButtonToggleNormal"
		TargetType="ToggleButton"
		BasedOn="{StaticResource ButtonNormal}"
		>
		<Style.Triggers>
			<Trigger Property="IsChecked" Value="True">
				<Setter Property="Background" Value="{StaticResource SolidPrimary}" />
				<Setter Property="BorderBrush" Value="Transparent" />
			</Trigger>
		</Style.Triggers>
	</Style>


	<!--  ToggleButton Icon  -->
	<Style
		x:Key="ButtonToggleIcon"
		TargetType="ToggleButton"
		BasedOn="{StaticResource ButtonIcon}"
		>
		<Style.Triggers>
			<Trigger Property="IsChecked" Value="True">
				<Setter Property="Background" Value="{StaticResource SolidPrimary}" />
				<Setter Property="BorderBrush" Value="Transparent" />
			</Trigger>
		</Style.Triggers>
	</Style>


	<!--#endregion ## Buttons-->


	<!--#region ## 🖊️ Text系-->

	<!--#region ## TextBox1-->
	<SolidColorBrush
		x:Key="TextBox.Static.Background"
		Color="{StaticResource BaseDark5}"
		/>
	<SolidColorBrush
		x:Key="TextBox.Static.Foreground"
		Color="{StaticResource Base3}"
		/>
	<SolidColorBrush
		x:Key="TextBox.Focus.Background"
		Color="{StaticResource Base1}"
		/>
	<SolidColorBrush
		x:Key="TextBox.Focus.Foreground"
		Color="{StaticResource Base8}"
		/>
	<SolidColorBrush
		x:Key="TextBox.Label.Foreground"
		Color="{StaticResource Base3}"
		/>
	<Style
		x:Key="TextBox1"
		TargetType="{x:Type TextBox}"
		>
		<Setter Property="AllowDrop" Value="true" />
		<Setter Property="Background" Value="{StaticResource TextBox.Static.Background}" />
		<Setter Property="BorderBrush" Value="{StaticResource GradientControlBorder2}" />
		<Setter Property="BorderThickness" Value="2" />
		<Setter Property="CaretBrush" Value="{StaticResource TextBox.Focus.Foreground}" />
		<Setter Property="FocusVisualStyle" Value="{x:Null}" />
		<Setter Property="FontSize" Value="{StaticResource FontSizeContent}" />
		<Setter Property="Foreground" Value="{StaticResource TextBox.Static.Foreground}" />
		<Setter Property="HorizontalContentAlignment" Value="Left" />
		<Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
		<Setter Property="Margin" Value="0" />
		<Setter Property="MinHeight" Value="32" />
		<Setter Property="MinLines" Value="1" />
		<Setter Property="Padding" Value="8,0" />
		<Setter Property="ScrollViewer.CanContentScroll" Value="True" />
		<Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
		<Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="auto" />
		<Setter Property="SelectionBrush" Value="{StaticResource GradientMainAccent}" />
		<Setter Property="SelectionOpacity" Value="1" />
		<Setter Property="SelectionTextBrush" Value="{StaticResource TextBox.Focus.Background}" />
		<Setter Property="Stylus.IsFlicksEnabled" Value="False" />
		<!--
			@info :
			To use "SelectionTextBrush",
			place below in App.xaml.cs > App().
			AppContext.SetSwitch("Switch.System.Windows.Controls.Text.UseAdornerForTextboxSelectionRendering", false);
		-->
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type TextBox}">
					<Border
						x:Name="border"
						CornerRadius="16"
						Background="{TemplateBinding Background}"
						SnapsToDevicePixels="True"
						>
						<Grid>
							<Border
								x:Name="rect2"
								CornerRadius="16"
								Background="{TemplateBinding Background}"
								BorderBrush="{TemplateBinding BorderBrush}"
								BorderThickness="{TemplateBinding BorderThickness}"
								SnapsToDevicePixels="True"
								>
								<!--  ↑ BorderBrush 内側化のために使用  -->

								<ScrollViewer
									x:Name="PART_ContentHost"
									Margin="{TemplateBinding Padding}"
									Focusable="false"
									HorizontalScrollBarVisibility="Hidden"
									VerticalScrollBarVisibility="Hidden"
									CanContentScroll="True"
									/>
							</Border>
							<TextBlock
								Width="auto"
								Height="auto"
								Margin="12,0,0,0"
								HorizontalAlignment="Left"
								VerticalAlignment="Center"
								Foreground="{StaticResource TextBox.Label.Foreground}"
								FontSize="{StaticResource FontSizeContent}"
								Text="{TemplateBinding Tag}"
								/>
						</Grid>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsEnabled" Value="false">
							<Setter TargetName="border" Property="Opacity" Value="0.56" />
						</Trigger>
						<Trigger Property="IsMouseOver" Value="true">
							<!--
							<Setter Property="BorderBrush" TargetName="border" Value="{StaticResource TextBox.MouseOver.Border}" />
							-->
						</Trigger>
						<Trigger Property="IsKeyboardFocused" Value="true">
							<Setter Property="Foreground" Value="{StaticResource TextBox.Focus.Foreground}" />
							<Setter TargetName="rect2" Property="Background" Value="{StaticResource TextBox.Focus.Background}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="TextWrapping" Value="Wrap" />
		<Setter Property="ToolTipService.InitialShowDelay" Value="200" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Style.Triggers>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsInactiveSelectionHighlightEnabled" Value="true" />
					<Condition Property="IsSelectionActive" Value="false" />
				</MultiTrigger.Conditions>
				<Setter Property="SelectionBrush" Value="{StaticResource SolidPrimary}" />
				<Setter Property="SelectionOpacity" Value="0.5" />
			</MultiTrigger>
			<MultiTrigger>
				<!--
				<MultiTrigger.Conditions>
					<Condition Property="IsSelectionActive" Value="True" />
				</MultiTrigger.Conditions>
				<Setter Property="SelectionTextBrush" Value="{StaticResource SolidBase1}" />
				<Setter Property="SelectionBrush" Value="{StaticResource SolidPrimary}" />
				<Setter Property="SelectionOpacity" Value="0.2" />
				-->
			</MultiTrigger>
		</Style.Triggers>
	</Style>
	<!--#endregion ## TextBox-->


	<Style
		x:Key="TextBox2_prompt"
		TargetType="TextBox"
		BasedOn="{StaticResource TextBox1}"
		>
		<Setter Property="AcceptsReturn" Value="True" />
		<Setter Property="Height" Value="92" />
		<Setter Property="Padding" Value="18,4" />
		<Setter Property="Tag" Value="👍️" />
		<Setter Property="ToolTip" Value="Positive Prompt: ここに指示を入力します。" />
	</Style>



	<Style
		x:Key="TextBlock1"
		TargetType="{x:Type TextBlock}"
		>
		<Setter Property="FontSize" Value="{StaticResource FontSizeContent}" />
		<Setter Property="Foreground" Value="{StaticResource SolidBase2}" />
		<Setter Property="Margin" Value="4" />
		<Setter Property="TextTrimming" Value="None" />
		<Setter Property="TextWrapping" Value="NoWrap" />
		<Setter Property="VerticalAlignment" Value="Center" />
	</Style>
	<!--#endregion ## Text-->


	<!--#region ## ✅️ CheckBox-->
	<Style
		x:Key="CheckBox1"
		TargetType="{x:Type CheckBox}"
		>
		<Setter Property="Background" Value="{StaticResource GradientControl}" />
		<Setter Property="BorderBrush" Value="Transparent" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="Cursor" Value="Hand" />
		<Setter Property="FocusVisualStyle" Value="{StaticResource GlobalFocusVisual}" />
		<Setter Property="FontSize" Value="{StaticResource FontSizeContent}" />
		<Setter Property="Foreground" Value="{StaticResource SolidBase1}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type CheckBox}">
					<Grid
						x:Name="templateRoot"
						Background="Transparent"
						SnapsToDevicePixels="True"
						>
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="Auto" />
							<ColumnDefinition Width="*" />
						</Grid.ColumnDefinitions>
						<Border
							x:Name="checkBoxBorder"
							Width="24"
							Height="24"
							Margin="1"
							HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
							VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
							CornerRadius="8"
							Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							>
							<Grid
								x:Name="markGrid"
								HorizontalAlignment="Center"
								VerticalAlignment="Center"
								>
								<TextBlock
									x:Name="optionMark"
									Style="{StaticResource TextBlock1}"
									FontFamily="{StaticResource FontIcon4}"
									Text=""
									Foreground="{StaticResource SolidBase4}"
									/>
								<TextBlock
									x:Name="indeterminateMark"
									Margin="2"
									HorizontalAlignment="Center"
									VerticalAlignment="Center"
									Text="✦"
									Foreground="{StaticResource SolidBase2}"
									Opacity="0"
									/>
							</Grid>
						</Border>
						<ContentPresenter
							x:Name="contentPresenter"
							Grid.Column="1"
							Margin="{TemplateBinding Padding}"
							HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
							VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
							Focusable="False"
							RecognizesAccessKey="True"
							SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
							TextElement.Foreground="{TemplateBinding Foreground}"
							TextElement.FontSize="{TemplateBinding FontSize}"
							/>
					</Grid>

					<ControlTemplate.Triggers>
						<Trigger Property="HasContent" Value="true">
							<Setter Property="FocusVisualStyle" Value="{StaticResource GlobalFocusVisual}" />
							<Setter Property="Padding" Value="4,-1,0,0" />
						</Trigger>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="Opacity" Value="0.8" />
						</Trigger>
						<Trigger Property="IsChecked" Value="true">
							<Setter TargetName="checkBoxBorder" Property="Background" Value="{StaticResource SolidPrimary}" />
							<Setter TargetName="indeterminateMark" Property="Opacity" Value="0" />
							<Setter TargetName="optionMark" Property="Foreground" Value="{StaticResource SolidBase1}" />
							<Setter TargetName="optionMark" Property="Opacity" Value="1" />
						</Trigger>
						<Trigger Property="IsChecked" Value="{x:Null}">
							<Setter TargetName="checkBoxBorder" Property="Background" Value="{StaticResource SolidPrimary}" />
							<Setter TargetName="indeterminateMark" Property="Opacity" Value="1" />
							<Setter TargetName="optionMark" Property="Opacity" Value="0" />
						</Trigger>
						<!--
						<Trigger Property="IsMouseOver" Value="true">
										<Setter Property="Background" TargetName="checkBoxBorder" Value="{StaticResource OptionMark.MouseOver.Background}" />
										<Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="{StaticResource OptionMark.MouseOver.Border}" />
										<Setter Property="Fill" TargetName="optionMark" Value="{StaticResource OptionMark.MouseOver.Glyph}" />
										<Setter Property="Fill" TargetName="indeterminateMark" Value="{StaticResource OptionMark.MouseOver.Glyph}" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
										<Setter Property="Background" TargetName="checkBoxBorder" Value="{StaticResource OptionMark.Disabled.Background}" />
										<Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="{StaticResource OptionMark.Disabled.Border}" />
										<Setter Property="Fill" TargetName="optionMark" Value="{StaticResource OptionMark.Disabled.Glyph}" />
										<Setter Property="Fill" TargetName="indeterminateMark" Value="{StaticResource OptionMark.Disabled.Glyph}" />
						</Trigger>
						<Trigger Property="IsPressed" Value="true">
										<Setter Property="Background" TargetName="checkBoxBorder" Value="{StaticResource OptionMark.Pressed.Background}" />
										<Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="{StaticResource OptionMark.Pressed.Border}" />
										<Setter Property="Fill" TargetName="optionMark" Value="{StaticResource OptionMark.Pressed.Glyph}" />
										<Setter Property="Fill" TargetName="indeterminateMark" Value="{StaticResource OptionMark.Pressed.Glyph}" />
						</Trigger>
						-->
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="VerticalContentAlignment" Value="Center" />
	</Style>
	<!--#endregion ## CheckBox-->


	<!--#region ## ≡ List (items-controls)-->

	<!--#region	## ListCommonItem1-->
	<Style
		x:Key="ListCommonItem1"
		TargetType="{x:Type ListBoxItem}"
		>
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="BorderBrush" Value="Transparent" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="Cursor" Value="Hand" />
		<Setter Property="FocusVisualStyle" Value="{StaticResource GlobalFocusVisual}" />
		<Setter Property="FontFamily" Value="{StaticResource GlobalFontFamily}" />
		<Setter Property="FontSize" Value="{StaticResource FontSizeContent}" />
		<Setter Property="Height" Value="32" />
		<Setter Property="Padding" Value="4,0" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ListBoxItem}">
					<Border
						x:Name="border1"
						Width="{TemplateBinding Width}"
						Height="{TemplateBinding Height}"
						Background="{TemplateBinding Background}"
						CornerRadius="{TemplateBinding ActualHeight,
						                               Converter={StaticResource ToHalf}}"
						>
						<Border
							x:Name="border2"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							CornerRadius="{TemplateBinding ActualHeight,
							                               Converter={StaticResource ToHalf}}"
							>
							<Grid Margin="{TemplateBinding Padding}">
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="*" />
									<ColumnDefinition Width="auto" />
								</Grid.ColumnDefinitions>

								<TextBlock
									Margin="0,0,0,2"
									Padding="8,0"
									HorizontalAlignment="Left"
									VerticalAlignment="Center"
									Text="{Binding TLabel}"
									Style="{StaticResource TextBlock1}"
									/>

								<TextBlock
									Grid.Column="1"
									Padding="4,0"
									HorizontalAlignment="Right"
									VerticalAlignment="Center"
									Text="{Binding TCategory2}"
									Style="{StaticResource TextBlock1}"
									/>

							</Grid>
							<!--
								<ContentPresenter
									x:Name="contentPresenter"
									Margin="{TemplateBinding Padding}"
									TextElement.FontFamily="{TemplateBinding FontFamily}"
									TextElement.FontSize="{TemplateBinding FontSize}"
									HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
									VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
									/>
							-->

						</Border>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsSelected" Value="True">
							<Setter TargetName="border1" Property="Background" Value="{StaticResource SolidPrimary}" />
							<Setter TargetName="border2" Property="BorderBrush" Value="{StaticResource GradientControlBorder}" />
							<!--
							<Setter TargetName="contentPresenter" Property="TextElement.FontWeight" Value="Bold" />
							-->
						</Trigger>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="Opacity" Value="0.8" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<!--#endregion	## ListCommonItem-->

	<!--#region	## ListCommonItem2-->
	<Style
		x:Key="ListCommonItem2Center"
		TargetType="{x:Type ListBoxItem}"
		>
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="BorderBrush" Value="Transparent" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="Cursor" Value="Hand" />
		<Setter Property="FocusVisualStyle" Value="{StaticResource GlobalFocusVisual}" />
		<Setter Property="FontSize" Value="{StaticResource FontSizeContent}" />
		<Setter Property="Padding" Value="4,0" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ListBoxItem}">
					<Border
						x:Name="border1"
						Height="{TemplateBinding Height}"
						Background="{TemplateBinding Background}"
						CornerRadius="{TemplateBinding ActualHeight,
						                               Converter={StaticResource ToHalf}}"
						>
						<Border
							x:Name="border2"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							CornerRadius="{TemplateBinding ActualHeight,
							                               Converter={StaticResource ToHalf}}"
							>
							<ContentPresenter
								x:Name="contentPresenter"
								Margin="{TemplateBinding Padding}"
								HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
								VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
								TextElement.FontFamily="{TemplateBinding FontFamily}"
								TextElement.FontSize="{TemplateBinding FontSize}"
								/>
						</Border>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsSelected" Value="True">
							<Setter TargetName="border1" Property="Background" Value="{StaticResource SolidPrimary}" />
							<Setter TargetName="border2" Property="BorderBrush" Value="{StaticResource GradientControlBorder}" />
							<!--
							<Setter TargetName="contentPresenter" Property="TextElement.FontWeight" Value="Bold" />
							-->
						</Trigger>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="Opacity" Value="0.8" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<!--#endregion	## ListCommonItem-->


	<!--#region ## [ 　　|▽] ComboBox-->
	<Style
		x:Key="ComboBox1"
		TargetType="ComboBox"
		>
		<Setter Property="Background" Value="{StaticResource GradientControl}" />
		<Setter Property="BorderBrush" Value="{StaticResource GradientControlBorder}" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="FocusVisualStyle" Value="{StaticResource GlobalFocusVisual}" />
		<Setter Property="Foreground" Value="{StaticResource SolidBase2}" />
		<Setter Property="HorizontalContentAlignment" Value="Left" />
		<Setter Property="ItemContainerStyle" Value="{StaticResource ListCommonItem1}" />
		<Setter Property="Padding" Value="16,0" />
		<!--
		<Setter Property="ItemTemplate">
				<Setter.Value>
					<DataTemplate>
						<Grid>
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="*" />
								<ColumnDefinition Width="auto" />
							</Grid.ColumnDefinitions>

							<TextBlock
								Text="{Binding TLabel}"
								Style="{StaticResource TextBlock1}"
								HorizontalAlignment="Left"
								/>
							<TextBlock
								Grid.Column="1"
								Text="{Binding TCategory}"
								Style="{StaticResource TextBlock1}"
								HorizontalAlignment="Right"
								TextAlignment="Right"
								/>
						</Grid>
					</DataTemplate>
				</Setter.Value>
		</Setter>
		-->
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ComboBox}">
					<!--  Editable のほうからのコピペ  -->
					<Grid
						x:Name="templateRoot"
						SnapsToDevicePixels="true"
						>
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="*" />
							<ColumnDefinition
								Width="0"
								MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"
								/>
						</Grid.ColumnDefinitions>

						<Popup
							x:Name="PART_Popup"
							Grid.ColumnSpan="2"
							Width="{Binding ElementName=templateRoot, Path=ActualWidth}"
							MaxWidth="{TemplateBinding MaxWidth}"
							MaxHeight="{TemplateBinding MaxDropDownHeight}"
							AllowsTransparency="true"
							IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource Mode=TemplatedParent}}"
							Placement="Bottom"
							>
							<Border
								x:Name="dropDownBorder"
								CornerRadius="16"
								Background="{TemplateBinding Background}"
								ClipToBounds="True"
								>
								<!--
									Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"
									BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}"
									BorderThickness="1"
								-->
								<ScrollViewer
									x:Name="DropDownScrollViewer"
									Margin="8"
									HorizontalScrollBarVisibility="Disabled"
									>
									<Grid
										x:Name="grid"
										RenderOptions.ClearTypeHint="Enabled"
										>
										<!--
										<Canvas
											x:Name="canvas"
											HorizontalAlignment="Left"
											Height="0"
											VerticalAlignment="Top"
											Width="0"
											>
											<Rectangle
												x:Name="opaqueRect"
												Fill="{Binding Background, ElementName=dropDownBorder}"
												Height="{Binding ActualHeight, ElementName=dropDownBorder}"
												Width="{Binding ActualWidth, ElementName=dropDownBorder}"
												/>
										</Canvas>
										-->
										<ItemsPresenter
											x:Name="ItemsPresenter"
											KeyboardNavigation.DirectionalNavigation="Contained"
											SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
											TextElement.Foreground="{TemplateBinding Foreground}"
											/>
									</Grid>
								</ScrollViewer>
							</Border>

						</Popup>

						<Border
							x:Name="Body"
							Grid.ColumnSpan="2"
							/>

						<ToggleButton
							x:Name="toggleButton"
							Grid.ColumnSpan="2"
							Style="{StaticResource ButtonToggleNormal}"
							Background="{TemplateBinding Background}"
							Foreground="{TemplateBinding Foreground}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource Mode=TemplatedParent}}"
							/>

						<TextBlock
							Grid.ColumnSpan="2"
							Margin="16,0"
							HorizontalAlignment="Right"
							Style="{StaticResource TextBlock1}"
							FontFamily="{StaticResource FontIcon4}"
							Text=""
							/>

						<ContentPresenter
							x:Name="contentPresenter"
							Grid.ColumnSpan="2"
							Margin="{TemplateBinding Padding}"
							HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
							VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
							ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}"
							ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
							Content="{TemplateBinding SelectionBoxItem}"
							ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
							IsHitTestVisible="false"
							SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
							TextElement.FontSize="{StaticResource FontSizeContent}"
							/>

						<TextBox
							x:Name="PART_EditableTextBox"
							Grid.Column="0"
							MinWidth="40"
							Margin="0"
							Padding="8,0"
							HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
							VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
							Style="{StaticResource TextBox1}"
							IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource Mode=TemplatedParent}}"
							IsEnabled="False"
							Visibility="Collapsed"
							/>

					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsEditable" Value="True">
							<Setter TargetName="PART_EditableTextBox" Property="IsEnabled" Value="True" />
							<Setter TargetName="PART_EditableTextBox" Property="IsHitTestVisible" Value="True" />
							<Setter TargetName="PART_EditableTextBox" Property="Text" Value="{Binding SelectionBoxItem}" />
							<Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible" />

						</Trigger>

						<Trigger Property="HasItems" Value="false">
							<Setter TargetName="dropDownBorder" Property="Height" Value="95" />
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsGrouping" Value="true" />
								<Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
							</MultiTrigger.Conditions>
							<Setter Property="ScrollViewer.CanContentScroll" Value="false" />
						</MultiTrigger>

						<!--
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Opacity" TargetName="border" Value="0.56" />
						</Trigger>
						<Trigger Property="IsKeyboardFocusWithin" Value="true">
							<Setter Property="Foreground" Value="Black" />
						</Trigger>
						<Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">
							<Setter Property="Margin" TargetName="shadow" Value="0,0,5,5" />
							<Setter Property="Color" TargetName="shadow" Value="#71000000" />
						</Trigger>
						<Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
							<Setter Property="Canvas.Top" TargetName="opaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}" />
							<Setter Property="Canvas.Left" TargetName="opaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}" />
						</Trigger>
						-->
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="VerticalAlignment" Value="Center" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
	</Style>
	<!--#endregion ## ComboBox-->

	<!--#region ## [ 1 | 2 | 3 ] SplitButton (ListView)-->
	<Style
		x:Key="ListViewSplitButton"
		TargetType="{x:Type ListView}"
		>
		<Setter Property="Background" Value="{StaticResource GradientControl}" />
		<Setter Property="BorderBrush" Value="Transparent" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="Foreground" Value="{StaticResource SolidBase2}" />
		<Setter Property="Height" Value="32" />
		<Setter Property="HorizontalContentAlignment" Value="Center" />
		<Setter Property="ItemContainerStyle" Value="{StaticResource ListCommonItem2Center}" />
		<Setter Property="ItemsPanel">
			<Setter.Value>
				<ItemsPanelTemplate>
					<UniformGrid
						x:Name="uniformGrid"
						Rows="1"
						/>
				</ItemsPanelTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="ScrollViewer.CanContentScroll" Value="true" />
		<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled" />
		<Setter Property="ScrollViewer.PanningMode" Value="Both" />
		<Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Hidden" />
		<Setter Property="Stylus.IsFlicksEnabled" Value="False" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ListView}">
					<Border
						x:Name="Bd"
						Height="32"
						Background="{TemplateBinding Background}"
						CornerRadius="16"
						SnapsToDevicePixels="true"
						>
						<ScrollViewer
							Padding="{TemplateBinding Padding}"
							Focusable="false"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							>
							<ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
						</ScrollViewer>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsEnabled" Value="false">
							<!--
							<Setter Property="Background" TargetName="Bd" Value="{StaticResource ListBox.Disabled.Background}" />
							<Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource ListBox.Disabled.Border}" />
							-->
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsGrouping" Value="true" />
								<Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
							</MultiTrigger.Conditions>
							<Setter Property="ScrollViewer.CanContentScroll" Value="false" />
						</MultiTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>

		</Setter>
		<Style.Triggers>
			<Trigger Property="IsEnabled" Value="false">
				<Setter Property="Opacity" Value="0.8" />
			</Trigger>
		</Style.Triggers>
	</Style>
	<!--#endregion ## SplitButton (ListView)-->

	<!--#region ##🚫 List PayloadPane (Empty Container)-->

	<Style
		x:Key="ListViewItemContainerStyle1"
		TargetType="{x:Type ListViewItem}"
		>
		<Setter Property="OverridesDefaultStyle" Value="True" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ListViewItem}">
					<Border Background="{TemplateBinding Background}">
						<ContentPresenter />
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style
		x:Key="ListView1"
		TargetType="ListView"
		>
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="BorderBrush" Value="Transparent" />
		<Setter Property="HorizontalAlignment" Value="Stretch" />
		<Setter Property="HorizontalContentAlignment" Value="Stretch" />
		<Setter Property="ItemContainerStyle" Value="{StaticResource ListViewItemContainerStyle1}" />
		<Setter Property="KeyboardNavigation.TabNavigation" Value="Contained" />
		<Setter Property="ScrollViewer.CanContentScroll" Value="True" />
		<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled" />
		<Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Visible" />
	</Style>
	<!--#endregion ##🚫 List PayloadPane (Empty Container)-->

	<!--#endregion ## ≡ List (items-controls)-->


	<!--#region ## 🎿 Slider-->
	<Style
		x:Key="Slider1"
		TargetType="{x:Type Slider}"
		>
		<Setter Property="Background" Value="{StaticResource SolidBaseDark5}" />
		<Setter Property="BorderBrush" Value="Transparent" />
		<Setter Property="Foreground" Value="{StaticResource SolidBase2}" />
		<Setter Property="IsMoveToPointEnabled" Value="False" />
		<Setter Property="IsSnapToTickEnabled" Value="True" />
		<Setter Property="SmallChange" Value="0.001" />
		<Setter Property="Stylus.IsPressAndHoldEnabled" Value="false" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Slider}">
					<Border
						x:Name="border"
						Background="{TemplateBinding Background}"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}"
						SnapsToDevicePixels="True"
						CornerRadius="16"
						>
						<Grid>
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="32" />
								<ColumnDefinition Width="*" />
								<ColumnDefinition Width="32" />
							</Grid.ColumnDefinitions>

							<!--
							<TickBar
								x:Name="TopTick"
								Fill="{TemplateBinding Foreground}"
								Height="2"
								Margin="0,0,0,2"
								Placement="Top"
								Grid.Row="0"
								Grid.ColumnSpan="3"
								Visibility="Collapsed"
								/>
							<TickBar
								x:Name="BottomTick"
								Fill="{TemplateBinding Foreground}"
								Height="2"
								Margin="0,2,0,0"
								Placement="Bottom"
								Grid.Row="2"
								Grid.ColumnSpan="3"
								Visibility="Collapsed"
								/>
							-->

							<Border
								x:Name="TrackBackground"
								Grid.Column="1"
								Grid.ColumnSpan="1"
								VerticalAlignment="Stretch"
								>
								<Canvas>
									<Rectangle
										x:Name="PART_SelectionRange"
										Height="32"
										Fill="{StaticResource SolidBase7}"
										Visibility="Hidden"
										Opacity="1.0"
										/>
								</Canvas>
							</Border>


							<Track
								x:Name="PART_Track"
								Grid.Row="1"
								Grid.Column="1"
								>
								<Track.DecreaseRepeatButton>
									<RepeatButton
										Command="{x:Static Slider.DecreaseLarge}"
										Style="{StaticResource RepeatButtonTransparent}"
										Background="{StaticResource SolidPrimary}"
										Delay="0"
										/>
								</Track.DecreaseRepeatButton>
								<Track.IncreaseRepeatButton>
									<RepeatButton
										Command="{x:Static Slider.IncreaseLarge}"
										Style="{StaticResource RepeatButtonTransparent}"
										Delay="0"
										/>
								</Track.IncreaseRepeatButton>
								<Track.Thumb>
									<Thumb
										x:Name="Thumb"
										Width="9"
										Height="32"
										VerticalAlignment="Center"
										OverridesDefaultStyle="True"
										Focusable="False"
										Background="Transparent"
										BorderBrush="Transparent"
										BorderThickness="0"
										Cursor="Hand"
										>
										<Thumb.Template>
											<ControlTemplate>
												<Border Background="{StaticResource GradientControl}">
													<Border
														BorderBrush="{StaticResource GradientControlBorder}"
														BorderThickness="1"
														/>
												</Border>
											</ControlTemplate>
										</Thumb.Template>
									</Thumb>

									<!--
										Template="{StaticResource SliderThumbHorizontalDefault}"
									-->
								</Track.Thumb>
							</Track>


							<Button
								Grid.Row="1"
								Grid.Column="0"
								Width="32"
								Height="32"
								Style="{StaticResource ButtonIcon}"
								Command="{x:Static Slider.DecreaseSmall}"
								Content=""
								/>

							<TextBox
								x:Name="sliderValueTextBox"
								Grid.Column="1"
								Width="auto"
								Height="auto"
								Margin="0"
								Padding="4,0"
								HorizontalAlignment="Center"
								VerticalAlignment="Center"
								VerticalContentAlignment="Center"
								Style="{StaticResource TextBox1}"
								Background="{x:Null}"
								BorderBrush="Transparent"
								Text="{Binding Value, RelativeSource={RelativeSource TemplatedParent}}"
								/>
							<!--
								Text="{Binding Value, StringFormat={}{0:N0}, RelativeSource={RelativeSource TemplatedParent}}"
							-->

							<Button
								Grid.Row="1"
								Grid.Column="2"
								Width="32"
								Height="32"
								Style="{StaticResource ButtonIcon}"
								Command="{x:Static Slider.IncreaseSmall}"
								Content=""
								/>


							<!--
							-->

						</Grid>

					</Border>
					<ControlTemplate.Triggers>
						<!--
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition SourceName="PART_Track" Property="IsMouseOver" Value="True" />
							</MultiTrigger.Conditions>
							<Setter />
						</MultiTrigger>
						<Trigger Property="TickPlacement" Value="TopLeft">
							<Setter Property="Visibility" TargetName="TopTick" Value="Visible" />
							<Setter Property="Template" TargetName="Thumb" Value="{StaticResource SliderThumbHorizontalTop}" />
							<Setter Property="Margin" TargetName="TrackBackground" Value="5,2,5,0" />
						</Trigger>
						<Trigger Property="TickPlacement" Value="BottomRight">
							<Setter Property="Visibility" TargetName="BottomTick" Value="Visible" />
							<Setter Property="Template" TargetName="Thumb" Value="{StaticResource SliderThumbHorizontalBottom}" />
							<Setter Property="Margin" TargetName="TrackBackground" Value="5,0,5,2" />
						</Trigger>
						<Trigger Property="TickPlacement" Value="Both">
							<Setter Property="Visibility" TargetName="TopTick" Value="Visible" />
							<Setter Property="Visibility" TargetName="BottomTick" Value="Visible" />
						</Trigger>
						-->
						<Trigger Property="IsSelectionRangeEnabled" Value="true">
							<Setter TargetName="PART_SelectionRange" Property="Visibility" Value="Visible" />
						</Trigger>
						<Trigger Property="IsKeyboardFocused" Value="true">
							<Setter TargetName="Thumb" Property="Foreground" Value="Blue" />
						</Trigger>
					</ControlTemplate.Triggers>

				</ControlTemplate>

			</Setter.Value>
		</Setter>
		<Setter Property="TickFrequency" Value="1" />
		<Style.Triggers>
			<Trigger Property="Orientation" Value="Vertical">
				<Setter Property="RenderTransform">
					<Setter.Value>
						<RotateTransform Angle="90" />
					</Setter.Value>
				</Setter>
				<Setter Property="RenderTransformOrigin" Value="0.5, 0.5" />
				<!--
				<Setter Property="Template" Value="{StaticResource SliderVertical}" />
				-->
			</Trigger>
		</Style.Triggers>
	</Style>
	<!--#endregion ## Slider-->


	<!--#region ## (›) Expander(Grouping)-->
	<Style
		x:Key="Expander1"
		TargetType="{x:Type Expander}"
		>
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="BorderBrush" Value="Transparent" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="FocusVisualStyle" Value="{StaticResource GlobalFocusVisual}" />
		<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
		<Setter Property="HorizontalContentAlignment" Value="Stretch" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Expander}">
					<Border
						Background="Transparent"
						BorderBrush="Transparent"
						BorderThickness="1"
						CornerRadius="16"
						SnapsToDevicePixels="true"
						>
						<DockPanel>
							<ToggleButton
								x:Name="HeaderSite"
								Height="40"
								HorizontalContentAlignment="Stretch"
								VerticalContentAlignment="Center"
								DockPanel.Dock="Top"
								Style="{StaticResource ButtonNormal}"
								BorderBrush="Transparent"
								IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource Mode=TemplatedParent}}"
								>
								<Grid Margin="8,0">
									<Grid.ColumnDefinitions>
										<ColumnDefinition Width="32" />
										<ColumnDefinition Width="*" />
										<ColumnDefinition Width="32" />
									</Grid.ColumnDefinitions>

									<TextBlock
										Grid.Column="0"
										HorizontalAlignment="Center"
										Style="{StaticResource TextBlock1}"
										FontFamily="{StaticResource FontIcon4}"
										Text=""
										/>

									<ContentPresenter
										Grid.Column="1"
										Height="auto"
										Margin="0"
										HorizontalAlignment="Center"
										VerticalAlignment="Center"
										Content="{TemplateBinding Header}"
										/>

									<TextBlock
										Grid.Column="2"
										HorizontalAlignment="Center"
										Style="{StaticResource TextBlock1}"
										FontFamily="{StaticResource FontIcon4}"
										Text=""
										/>

								</Grid>
							</ToggleButton>
							<!--
								Padding="{TemplateBinding Padding}"
								HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
								VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
								Foreground="{TemplateBinding Foreground}"
								ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
								ContentTemplate="{TemplateBinding HeaderTemplate}"
								MinWidth="0"
								MinHeight="0"
								FontStretch="{TemplateBinding FontStretch}"
								FocusVisualStyle="{StaticResource ExpanderHeaderFocusVisual}"
								FontStyle="{TemplateBinding FontStyle}"
								FontFamily="{TemplateBinding FontFamily}"
								FontWeight="{TemplateBinding FontWeight}"
								FontSize="{TemplateBinding FontSize}"
								Margin="1"
								Style="{StaticResource ExpanderDownHeaderStyle}"
							-->
							<ContentPresenter
								x:Name="ExpandSite"
								Margin="{TemplateBinding Padding}"
								HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
								VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
								DockPanel.Dock="Bottom"
								Focusable="false"
								Visibility="Collapsed"
								/>
						</DockPanel>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsExpanded" Value="true">
							<Setter TargetName="ExpandSite" Property="Visibility" Value="Visible" />
						</Trigger>
						<!--
						<Trigger Property="ExpandDirection" Value="Right">
							<Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Right" />
							<Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Left" />
							<Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderRightHeaderStyle}" />
						</Trigger>
						<Trigger Property="ExpandDirection" Value="Up">
							<Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Top" />
							<Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Bottom" />
							<Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderUpHeaderStyle}" />
						</Trigger>
						<Trigger Property="ExpandDirection" Value="Left">
							<Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Left" />
							<Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Right" />
							<Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderLeftHeaderStyle}" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
						</Trigger>
						-->
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="VerticalContentAlignment" Value="Stretch" />
	</Style>



	<!--#endregion ## Expander(Grouping)-->


	<!--#region ## .../ ProgressBar-->
	<Style
		x:Key="ProgressBarStyle1"
		TargetType="{x:Type ProgressBar}"
		>
		<Setter Property="Background" Value="{StaticResource GradientControl}" />
		<Setter Property="BorderBrush" Value="Transparent" />
		<Setter Property="BorderThickness" Value="0" />
		<Setter Property="Foreground" Value="{StaticResource SolidPrimary}" />
		<Setter Property="Height" Value="8" />
		<Setter Property="IsIndeterminate" Value="True" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ProgressBar}">
					<Grid x:Name="TemplateRoot">
						<Border
							Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							CornerRadius="{TemplateBinding Height,
							                               Converter={StaticResource ToHalf}}"
							/>
						<Rectangle
							x:Name="PART_Track"
							RadiusX="{TemplateBinding Height,
							                          Converter={StaticResource ToHalf}}"
							RadiusY="{TemplateBinding Height,
							                          Converter={StaticResource ToHalf}}"
							/>
						<Grid
							x:Name="PART_Indicator"
							HorizontalAlignment="Left"
							ClipToBounds="True"
							>
							<Rectangle
								x:Name="Indicator"
								Fill="{TemplateBinding Foreground}"
								RadiusX="{TemplateBinding Height,
								                          Converter={StaticResource ToHalf}}"
								RadiusY="{TemplateBinding Height,
								                          Converter={StaticResource ToHalf}}"
								/>
							<Rectangle
								x:Name="Animation"
								Fill="{TemplateBinding Foreground}"
								RenderTransformOrigin="0.5,0.5"
								RadiusX="{TemplateBinding Height,
								                          Converter={StaticResource ToHalf}}"
								RadiusY="{TemplateBinding Height,
								                          Converter={StaticResource ToHalf}}"
								>
								<Rectangle.RenderTransform>
									<TransformGroup>
										<ScaleTransform />
										<SkewTransform />
										<RotateTransform />
										<TranslateTransform />
									</TransformGroup>
								</Rectangle.RenderTransform>
							</Rectangle>
						</Grid>
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualState x:Name="Determinate" />
								<VisualState x:Name="Indeterminate">
									<Storyboard RepeatBehavior="Forever">
										<DoubleAnimationUsingKeyFrames
											Storyboard.TargetName="Animation"
											Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)"
											>
											<EasingDoubleKeyFrame
												KeyTime="0"
												Value="0.0"
												/>
											<EasingDoubleKeyFrame
												KeyTime="0:0:1"
												Value="0.24"
												/>
											<EasingDoubleKeyFrame
												KeyTime="0:0:2"
												Value="0.25"
												/>
										</DoubleAnimationUsingKeyFrames>
										<PointAnimationUsingKeyFrames
											Storyboard.TargetName="Animation"
											Storyboard.TargetProperty="(UIElement.RenderTransformOrigin)"
											>
											<EasingPointKeyFrame
												KeyTime="0"
												Value="-0.5,0.5"
												/>
											<EasingPointKeyFrame
												KeyTime="0:0:1"
												Value="0.5,0.5"
												/>
											<EasingPointKeyFrame
												KeyTime="0:0:2"
												Value="1.5,0.5"
												/>
										</PointAnimationUsingKeyFrames>

									</Storyboard>
								</VisualState>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="Orientation" Value="Vertical">
							<Setter TargetName="TemplateRoot" Property="LayoutTransform">
								<Setter.Value>
									<RotateTransform Angle="-90" />
								</Setter.Value>
							</Setter>
						</Trigger>
						<Trigger Property="IsIndeterminate" Value="true">
							<Setter TargetName="Indicator" Property="Visibility" Value="Collapsed" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<!--#endregion ##:buffering: ProgressBar-->


</ResourceDictionary>